using MemoryServer.DocumentSegmentation.Models;
using MemoryServer.Models;

namespace MemoryServer.DocumentSegmentation.Services;

/// <summary>
/// Interface for LLM-powered document segmentation services.
/// Extends the base document segmentation service with LLM-specific capabilities.
/// </summary>
public interface ILlmDocumentSegmentationService
{
  /// <summary>
  /// Analyzes document content to determine the optimal segmentation strategy using LLM analysis.
  /// </summary>
  /// <param name="content">The document content to analyze</param>
  /// <param name="documentType">Type of document for context</param>
  /// <param name="cancellationToken">Cancellation token</param>
  /// <returns>Strategy recommendation with confidence score</returns>
  Task<StrategyRecommendation> AnalyzeOptimalStrategyAsync(
    string content,
    DocumentType documentType = DocumentType.Generic,
    CancellationToken cancellationToken = default);

  /// <summary>
  /// Performs LLM-powered document segmentation using the specified strategy.
  /// </summary>
  /// <param name="content">The document content to segment</param>
  /// <param name="strategy">Segmentation strategy to apply</param>
  /// <param name="documentType">Type of document for optimization</param>
  /// <param name="cancellationToken">Cancellation token</param>
  /// <returns>List of segments generated by LLM</returns>
  Task<List<DocumentSegment>> PerformLlmSegmentationAsync(
    string content,
    SegmentationStrategy strategy,
    DocumentType documentType = DocumentType.Generic,
    CancellationToken cancellationToken = default);

  /// <summary>
  /// Validates and enhances segment quality using LLM analysis.
  /// </summary>
  /// <param name="segments">Segments to validate and enhance</param>
  /// <param name="originalContent">Original document content for context</param>
  /// <param name="cancellationToken">Cancellation token</param>
  /// <returns>Enhanced segments with improved quality scores</returns>
  Task<List<DocumentSegment>> ValidateAndEnhanceSegmentsAsync(
    List<DocumentSegment> segments,
    string originalContent,
    CancellationToken cancellationToken = default);

  /// <summary>
  /// Checks if LLM services are available and healthy.
  /// </summary>
  /// <param name="cancellationToken">Cancellation token</param>
  /// <returns>True if LLM services are available</returns>
  Task<bool> IsLlmAvailableAsync(CancellationToken cancellationToken = default);
}

/// <summary>
/// Strategy recommendation with confidence and reasoning.
/// </summary>
public class StrategyRecommendation
{
  /// <summary>
  /// Recommended segmentation strategy
  /// </summary>
  public SegmentationStrategy Strategy { get; set; }

  /// <summary>
  /// Confidence score (0.0 to 1.0)
  /// </summary>
  public double Confidence { get; set; }

  /// <summary>
  /// LLM reasoning for the recommendation
  /// </summary>
  public string Reasoning { get; set; } = string.Empty;

  /// <summary>
  /// Alternative strategies considered
  /// </summary>
  public List<SegmentationStrategy> Alternatives { get; set; } = new();

  /// <summary>
  /// Additional metadata from LLM analysis
  /// </summary>
  public Dictionary<string, object> Metadata { get; set; } = new();
}
