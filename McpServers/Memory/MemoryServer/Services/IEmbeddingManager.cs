using MemoryServer.Models;

namespace MemoryServer.Services;

/// <summary>
/// Interface for managing embeddings with caching and batch processing capabilities.
/// Provides high-level embedding operations for the memory system.
/// </summary>
public interface IEmbeddingManager
{
    /// <summary>
    /// Generates an embedding for the given content using the optimal embedding model.
    /// Results are cached to avoid regenerating embeddings for the same content.
    /// </summary>
    /// <param name="content">The text content to generate an embedding for.</param>
    /// <param name="cancellationToken">Cancellation token for the operation.</param>
    /// <returns>The embedding vector as a float array.</returns>
    Task<float[]> GenerateEmbeddingAsync(string content, CancellationToken cancellationToken = default);

    /// <summary>
    /// Generates embeddings for multiple content strings in a batch for efficiency.
    /// Uses caching to avoid regenerating embeddings for already processed content.
    /// </summary>
    /// <param name="contents">The list of text contents to generate embeddings for.</param>
    /// <param name="cancellationToken">Cancellation token for the operation.</param>
    /// <returns>List of embedding vectors in the same order as the input contents.</returns>
    Task<List<float[]>> GenerateBatchEmbeddingsAsync(List<string> contents, CancellationToken cancellationToken = default);

    /// <summary>
    /// Searches for similar content using vector similarity search.
    /// </summary>
    /// <param name="queryEmbedding">The embedding vector to search for similar content.</param>
    /// <param name="sessionContext">Session context for isolation.</param>
    /// <param name="limit">Maximum number of results to return.</param>
    /// <param name="threshold">Minimum similarity threshold (0.0 to 1.0).</param>
    /// <param name="cancellationToken">Cancellation token for the operation.</param>
    /// <returns>List of memories with similarity scores.</returns>
    Task<List<MemorySearchResult>> SearchSimilarAsync(
        float[] queryEmbedding,
        SessionContext sessionContext,
        int limit = 10,
        float threshold = 0.7f,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Gets the dimension of embeddings generated by the current model.
    /// </summary>
    int EmbeddingDimension { get; }

    /// <summary>
    /// Gets the name of the current embedding model being used.
    /// </summary>
    string ModelName { get; }

    /// <summary>
    /// Clears the embedding cache to free memory.
    /// </summary>
    void ClearCache();

    /// <summary>
    /// Gets cache statistics for monitoring and debugging.
    /// </summary>
    /// <returns>Cache statistics including hit rate and entry count.</returns>
    EmbeddingCacheStats GetCacheStats();
}

/// <summary>
/// Result of a memory search with similarity scoring.
/// </summary>
public class MemorySearchResult
{
    /// <summary>
    /// The memory that matched the search.
    /// </summary>
    public Memory Memory { get; set; } = new();

    /// <summary>
    /// Similarity score (0.0 to 1.0, higher is more similar).
    /// </summary>
    public float SimilarityScore { get; set; }

    /// <summary>
    /// Distance metric used for similarity calculation.
    /// </summary>
    public string DistanceMetric { get; set; } = "cosine";
}

/// <summary>
/// Statistics about the embedding cache performance.
/// </summary>
public class EmbeddingCacheStats
{
    /// <summary>
    /// Total number of cache requests.
    /// </summary>
    public long TotalRequests { get; set; }

    /// <summary>
    /// Number of cache hits.
    /// </summary>
    public long CacheHits { get; set; }

    /// <summary>
    /// Number of cache misses.
    /// </summary>
    public long CacheMisses { get; set; }

    /// <summary>
    /// Cache hit rate as a percentage (0.0 to 100.0).
    /// </summary>
    public double HitRate => TotalRequests > 0 ? (double)CacheHits / TotalRequests * 100.0 : 0.0;

    /// <summary>
    /// Current number of entries in the cache.
    /// </summary>
    public int EntryCount { get; set; }

    /// <summary>
    /// Estimated memory usage of the cache in bytes.
    /// </summary>
    public long EstimatedMemoryUsage { get; set; }
}